{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Desktop/react-calculator/src/Component/Calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Calculator.css\";\nimport NumberFormat from \"react-number-format\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Calculator() {\n  _s();\n\n  const [preState, setPreState] = useState(\"\");\n  const [curState, setCurState] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [total, setTotal] = useState(false);\n\n  const inputNum = e => {\n    if (curState.includes(\".\") && e.target.innerText === \".\") return;\n\n    if (total) {\n      setPreState(\"\");\n    }\n\n    curState ? setCurState(pre => pre + e.target.innerText) : setCurState(e.target.innerText);\n    setTotal(false);\n  };\n\n  useEffect(() => {\n    setInput(curState);\n  }, [curState]);\n  useEffect(() => {\n    setInput(\"0\");\n  }, []);\n\n  const operatorType = e => {\n    setTotal(false);\n    setOperator(e.target.innerText);\n    if (curState === \"\") return;\n\n    if (preState !== \"\") {\n      equals();\n    } else {\n      setPreState(curState);\n      setCurState(\"\");\n    }\n  };\n\n  const equals = e => {\n    if ((e === null || e === void 0 ? void 0 : e.target.innerText) === \"=\") {\n      setTotal(true);\n    }\n\n    let calc;\n\n    switch (operator) {\n      case \"/\":\n        calc = String(parseFloat(preState) / parseFloat(curState));\n        break;\n\n      case \"+\":\n        calc = String(parseFloat(preState) + parseFloat(curState));\n        break;\n\n      case \"-\":\n        calc = String(parseFloat(preState) - parseFloat(curState));\n        break;\n\n      case \"X\":\n        calc = String(parseFloat(preState) * parseFloat(curState));\n        break;\n\n      default:\n        return;\n    }\n\n    setInput(\"\");\n    setPreState(calc);\n    setCurState(\"\");\n  };\n\n  const minusPlus = () => {};\n\n  const percent = () => {};\n\n  const reset = () => {\n    setPreState(\"\");\n    setCurState(\"\");\n    setInput(\"0\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"screen\",\n        children: input !== \"\" || input === \"0\" ? /*#__PURE__*/_jsxDEV(NumberFormat, {\n          value: input,\n          displayType: \"text\",\n          thousandSeparator: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(NumberFormat, {\n          value: preState,\n          displayType: \"text\",\n          thousandSeparator: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: reset,\n        className: \"btn light-gray\",\n        children: \"AC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: percent,\n        className: \"btn light-gray\",\n        children: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: minusPlus,\n        className: \"btn light-gray\",\n        children: \"+/-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: operatorType,\n        className: \"btn orange\",\n        children: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: operatorType,\n        className: \"btn orange\",\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: operatorType,\n        className: \"btn orange\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: operatorType,\n        className: \"btn orange\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn zero\",\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: inputNum,\n        className: \"btn\",\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: equals,\n        className: \"btn\",\n        children: \"=\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calculator, \"gOf2rW4WOaEPuNkEcSO0k9R+Dw0=\");\n\n_c = Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["/Users/phil/Desktop/react-calculator/src/Component/Calculator.js"],"names":["React","useState","useEffect","NumberFormat","Calculator","preState","setPreState","curState","setCurState","input","setInput","operator","setOperator","total","setTotal","inputNum","e","includes","target","innerText","pre","operatorType","equals","calc","String","parseFloat","minusPlus","percent","reset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Calculator.css\";\nimport NumberFormat from \"react-number-format\";\n\nexport default function Calculator() {\n  const [preState, setPreState] = useState(\"\");\n  const [curState, setCurState] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [total, setTotal] = useState(false);\n\n  const inputNum = (e) => {\n    if (curState.includes(\".\") && e.target.innerText === \".\") return;\n    if (total) {\n      setPreState(\"\");\n    }\n\n    curState\n      ? setCurState((pre) => pre + e.target.innerText)\n      : setCurState(e.target.innerText);\n    setTotal(false);\n  };\n\n  useEffect(() => {\n    setInput(curState);\n  }, [curState]);\n\n  useEffect(() => {\n    setInput(\"0\");\n  }, []);\n\n  const operatorType = (e) => {\n    setTotal(false);\n    setOperator(e.target.innerText);\n    if (curState === \"\") return;\n    if (preState !== \"\") {\n      equals();\n    } else {\n      setPreState(curState);\n      setCurState(\"\");\n    }\n  };\n\n  const equals = (e) => {\n    if (e?.target.innerText === \"=\") {\n      setTotal(true);\n    }\n\n    let calc;\n    switch (operator) {\n      case \"/\":\n        calc = String(parseFloat(preState) / parseFloat(curState));\n        break;\n      case \"+\":\n        calc = String(parseFloat(preState) + parseFloat(curState));\n        break;\n      case \"-\":\n        calc = String(parseFloat(preState) - parseFloat(curState));\n        break;\n      case \"X\":\n        calc = String(parseFloat(preState) * parseFloat(curState));\n        break;\n\n      default:\n        return;\n    }\n    setInput(\"\");\n    setPreState(calc);\n    setCurState(\"\");\n  };\n\n  const minusPlus = () => {};\n\n  \n  const percent = () => {};\n\n  const reset = () => {\n    setPreState(\"\");\n    setCurState(\"\");\n    setInput(\"0\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"wrapper\">\n        <div className=\"screen\">\n          {input !== \"\" || input === \"0\" ? (\n            <NumberFormat\n              value={input}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          ) : (\n            <NumberFormat\n              value={preState}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          )}\n        </div>\n        <div onClick={reset} className=\"btn light-gray\">\n          AC\n        </div>\n        <div onClick={percent} className=\"btn light-gray\">\n          %\n        </div>\n        <div onClick={minusPlus} className=\"btn light-gray\">\n          +/-\n        </div>\n        <div onClick={operatorType} className=\"btn orange\">\n          /\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          7\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          8\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          9\n        </div>\n        <div onClick={operatorType} className=\"btn orange\">\n          X\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          4\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          5\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          6\n        </div>\n        <div onClick={operatorType} className=\"btn orange\">\n          +\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          1\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          2\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          3\n        </div>\n        <div onClick={operatorType} className=\"btn orange\">\n          -\n        </div>\n        <div onClick={inputNum} className=\"btn zero\">\n          0\n        </div>\n        <div onClick={inputNum} className=\"btn\">\n          .\n        </div>\n        <div onClick={equals} className=\"btn\">\n          =\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}